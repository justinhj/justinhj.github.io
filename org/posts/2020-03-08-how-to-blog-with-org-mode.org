#+TITLE: Blogging with Emacs and Org-mode
#+AUTHOR: Justin Heyes-Jones
#+DATE: 2020
#+STARTUP: showall
#+OPTIONS: toc:nil
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.3 (<a href="http://orgmode.org">Org</a> mode 9.4)
#+LATEX_HEADER:
#+BEGIN_EXPORT html
---
layout: post
title: How to blog with Org-mode
date: '2020-03-09T00:00:00.000-08:00'
tags: [47-degs, emacs, org-mode, blogging, github-pages, jekyll]
---
#+END_EXPORT
* How to blog with Org mode
** Just make an org file like normal

#+BEGIN_QUOTE
"You can include interesting quotes inline using the quote directives."

â€• Anonymous Emacs User
#+END_QUOTE

1. Can have lists of things
1. Such as this
1. It's a list with three things

You can have italics by wrapping a /word/ in forward slashes. You can *bold* a
word with asterisks. /*Both at once*/ is of course also possible.

Using equals will =emphasize things=.

Of course
- Bullet lists
- are
- also a thing.

You can use special symbols like \pound100 and \copy2020 Justin Heyes-Jones and
mathematical symbols like \lambda and \pi
** What about code?
Here's some emacs code

#+BEGIN_SRC emacs-lisp
(require 'company)

(defun custom-dictionary-company-backend (command &optional arg &rest ignored)
  "Company mode backend for a custom dictionary stored as a radix tree."
  (case command
    ('init    
     (unless (boundp 'custom-dictionary-company--words-tree)
         (setq custom-dictionary-company--words-tree (tree-from-file "dictionary.el"))))
    ('prefix
     (company-grab-word))
    ('candidates
     (radix-tree-keys custom-dictionary-company--words-tree (downcase arg)))
    ('ignore-case
     'keep-prefix)))
#+END_SRC

And some Scala code

#+BEGIN_SRC scala
  def main(args: Array[String]): Unit = {

    // ISO 8601
    val lastNotifications = "Fri, 06 Mar 2020 22:13:45 GMT"

    //val managedZioBackend = Managed.make(AsyncHttpClientZioBackend())(what => what.close())

    val program = (for(
        implicit0(backend: SttpBackend[Task,Nothing,WebSocketHandler]) <- AsyncHttpClientZioBackend();
        //response <- getNotificationsSince(lastNotifications).send();
        response <- getGists().send();
        _ <- putStrLn(s"We got the notifications");
        _ <- putStrLn(s"Response: $response")
        ) yield ())

    runtime.unsafeRun(program)
  }
#+END_SRC
** Final notes

So that's all folks. Check out the accompanying bitbucket repo if you want to download the code.
